GSQL 1.5:
=========

- Ported to Groovy 1.5.4. Versions upto Groovy 1.5.3 will *not* work. 
- Slightly improved the Join syntax: Join objects now have a
  whereColumn() which you can use to create correct WHERE conditions.
- Classes derived from DynaObjects can now have properties just like
  any other class.
- By implementing additionalPropertiesToString(), you can add them to
  the result of the default implementation of toString() in DynaClass.
- The dynamic properties of DynaObjects are now stored in a field
  called "__do_propertySet" to avoid name clashes in derived classes.
- Added a couple of helper classes to talk to a database. DBOp allows
  to define a closure-like object which gets invoked for every row
  read from the database. PrintDBOp will print the rows to the console,
  ExportDBOp allows to quickly create exporters for data from the
  database, for example, to create CSV files.
- DBUtil contains a couple of helper methods when working with
  databases. Highlights:
    - Methods to convert java.lang.Date to java.sql.Date, Time
      and Timestamp
    - Methods to quickly convert results from the database to
      strings for debugging
    - Methods to close all kinds of database objects without
      throwing exceptions. They are logged with log4j, instead.
    - Helper methods to execute queries and statements
- A couple of other small bugfixes and enhancements.

GSQL 1.1:
=========

- No size/scale for types which have no size (like INTEGER)
- New class Select which can be used to build SELECT statements
  including joins, upper limit for returned rows, ordering,
  grouping, etc.
- New class DataSourceProvider which provides a global datasource. If
  you don't set a specific datasource in a Select object, it will try
  to use this provider to find one.
- Data from the database can read into POJOs.
- Select can handle arbitrary large results.
- The "size" field can now be an int or a String like "10,2" for
  DECIMAL(10,2).
- The type can be a string or a constant from java.sql.Types.
- Each column has now a "groovyName" which allows you to map arbitrary
  DB names to properties. These names can also be used to lookup
  columns in results or when building SELECT statements to make your
  code more readable.
- There is a special class called SQLResultObject which can be used
  to build business objects that are filled with data from the DB using
  the Select class. Unlike Expando, the derived classes can have
  extra properties.

Open issues:

- Logging in Select via log4j because java.logging is swallowed inside of
  Tomcat. This violates the standard Groovy logging rules.
- The ant build.xml doesn't work ATM.
- DynaObject should be merged with Expando.

GSQL 1.0:
=========

Copied from old GSQL sources

